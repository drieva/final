workin
Form1
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;

namespace TextAdventureGame
{
    public partial class Form1 : Form
    {
        private int health = 100;
        private string location = "Forest";
        private string description = "You find yourself in a dense forest. Trees surround you, a path leads deeper into the woods.";
        private List<string> inventory = new List<string>();

        private enum GameState
        {
            Introduction,
            Forest,
            River,
            Cave,
            Mountain,
            End
        }

        private GameState gameState = GameState.Introduction;

        public Form1()
        {
            InitializeComponent();
            this.BackgroundImage = Image.FromFile(@"C:\Users\imdri\Desktop\R.jpg");
            this.BackgroundImageLayout = ImageLayout.Stretch;
            this.Size = new Size(1000, 600);

            // Adjust control positions and sizes
            lblNarration.Location = new Point(20, 20);
            lblNarration.Size = new Size(700, 50);
            lblHealth.Location = new Point(20, 80);
            lblLocation.Location = new Point(20, 110);
            lblDescription.Location = new Point(20, 140);
            lblDescription.Size = new Size(300, 100);
            lstInventory.Location = new Point(20, 270);
            lstInventory.Size = new Size(150, 100);
            txtCommand.Location = new Point(250, 450);
            txtCommand.Size = new Size(150, 20);
            btnSubmit.Location = new Point(420, 448);
            txtOutput.Location = new Point(600, 80);
            txtOutput.Size = new Size(350, 470);

            ShowInitialMessage();
            DisplayGameOutput();
        }

        private void ShowInitialMessage()
        {
            AppendResponse("Welcome to the Text Adventure Game!");
            AppendResponse("You wake up in the midst of a dense forest, disoriented and confused. You have no memory of how you got here or why. All you know is that you must find a way out of this unfamiliar place.");
            AppendResponse("What will you do?");
            AppendResponse("A) Explore the forest");
            AppendResponse("B) Rest for a while");
        }

        private void DisplayGameOutput()
        {
            lblNarration.Text = GetNarration();
            lblHealth.Text = $"Health: {health}";
            lblLocation.Text = $"Location: {location}";
            lblDescription.Text = $"Description: {description}";
            DisplayInventory();
            DisplayChoices();
            txtCommand.Focus();
        }

        private string GetNarration()
        {
            switch (gameState)
            {
                case GameState.Forest:
                    return "You are in the dense forest. What will you do?";
                case GameState.River:
                    return "You come across a swift river blocking your path. What's your next move?";
                case GameState.Cave:
                    return "You enter a dark cave. It's too dark to see anything. What will you do?";
                case GameState.Mountain:
                    return "You climb a steep mountain. What's your next move?";
                case GameState.End:
                    return "You have reached the end of your journey.";
                default:
                    return "";
            }
        }

        private void DisplayInventory()
        {
            lstInventory.Items.Clear();
            foreach (var item in inventory)
            {
                lstInventory.Items.Add($"Â· {item}");
            }
        }

        private void DisplayChoices()
        {
            switch (gameState)
            {
                case GameState.Forest:
                    DisplayForestChoices();
                    break;
                case GameState.River:
                    DisplayRiverChoices();
                    break;
                case GameState.Cave:
                    DisplayCaveChoices();
                    break;
                case GameState.Mountain:
                    DisplayMountainChoices();
                    break;
                case GameState.End:
                    DisplayEndChoices();
                    break;
            }
        }

        private void DisplayForestChoices()
        {
            AppendResponse("A) Follow the path deeper into the woods");
            AppendResponse("B) Climb a tree to get a better view");
        }

        private void DisplayRiverChoices()
        {
            AppendResponse("A) Try to swim across the river");
            AppendResponse("B) Look for a bridge upstream");
        }

        private void DisplayCaveChoices()
        {
            AppendResponse("A) Light a torch and enter the cave");
            AppendResponse("B) Stay outside and find another path");
        }

        private void DisplayMountainChoices()
        {
            AppendResponse("A) Keep climbing to reach the top");
            AppendResponse("B) Descend and explore the foothills");
        }

        private void DisplayEndChoices()
        {
            AppendResponse("Congratulations! You have reached the end of your journey.");
            AppendResponse("Would you like to play again? (Y/N)");
        }

        private void AppendResponse(string response)
        {
            txtOutput.AppendText(response + "\n\n");
        }

        private void ProcessCommand(string command)
        {
            command = command.ToLower();
            switch (gameState)
            {
                case GameState.Introduction:
                    ProcessIntroductionCommand(command);
                    break;
                case GameState.Forest:
                    ProcessForestCommand(command);
                    break;
                case GameState.River:
                    ProcessRiverCommand(command);
                    break;
                case GameState.Cave:
                    ProcessCaveCommand(command);
                    break;
                case GameState.Mountain:
                    ProcessMountainCommand(command);
                    break;
                case GameState.End:
                    ProcessEndCommand(command);
                    break;
            }
        }

        private void ProcessIntroductionCommand(string command)
        {
            if (command == "a")
            {
                gameState = GameState.Forest;
                description = "You find yourself in a dense forest. Trees surround you, a path leads deeper into the woods.";
            }
            else if (command == "b")
            {
                health += 10; // Assuming resting increases health
                AppendResponse("You decide to rest for a while, recuperating your strength.");
                gameState = GameState.Forest;
                description = "You find yourself in a dense forest. Trees surround you, a path leads deeper into the woods.";
            }
            else
            {
                AppendResponse("Please choose between A and B.");
                return;
            }

            DisplayGameOutput();
        }

        private void ProcessForestCommand(string command)
        {
            if (command.StartsWith("a"))
            {
                gameState = GameState.River;
                description = "You follow the path deeper into the woods, hoping to find a way out.";
            }
            else if (command.StartsWith("b"))
            {
                health -= 5;
                AppendResponse("You climb a tree but see nothing but more trees around you.");
            }
            else
            {
                AppendResponse("Please choose between A and B.");
                return;
            }

            DisplayGameOutput();
        }

        private void ProcessRiverCommand(string command)
        {
            if (command.StartsWith("a"))
            {
                health -= 20;
                AppendResponse("You try to swim across the river but get caught in the strong current. You barely manage to make it to the other side.");
                gameState = GameState.Cave;
                description = "You find yourself at the entrance of a dark cave.";
            }
            else if (command.StartsWith("b"))
            {
                gameState = GameState.Cave;
                description = "You decide to look for a bridge upstream.";
            }
            else
            {
                AppendResponse("Please choose between A and B.");
                return;
            }

            DisplayGameOutput();
        }

        private void ProcessCaveCommand(string command)
        {
            if (command.StartsWith("a"))
            {
                gameState = GameState.Mountain;
                description = "You light a torch and cautiously enter the cave.";
            }
            else if (command.StartsWith("b"))
            {
                gameState = GameState.Mountain;
                description = "You decide to find another path instead.";
            }
            else
            {
                AppendResponse("Please choose between A and B.");
                return;
            }

            DisplayGameOutput();
        }

        private void ProcessMountainCommand(string command)
        {
            if (command.StartsWith("a"))
            {
                health -= 30;
                AppendResponse("You keep climbing but slip and fall down the mountain, injuring yourself.");
                gameState = GameState.End;
            }
            else if (command.StartsWith("b"))
            {
                AppendResponse("You descend and explore the foothills, eventually finding a way out of the forest. Congratulations! You have successfully escaped!");
                gameState = GameState.End;
            }
            else
            {
                AppendResponse("Please choose between A and B.");
                return;
            }

            DisplayGameOutput();
        }

        private void ProcessEndCommand(string command)
        {
            if (command == "y")
            {
                ResetGame();
            }
            else if (command == "n")
            {
                Application.Exit();
            }
            else
            {
                AppendResponse("Please choose between Y and N.");
            }
        }

        private void ResetGame()
        {
            health = 100;
            location = "Forest";
            description = "You find yourself in a dense forest. Trees surround you, a path leads deeper into the woods.";
            inventory.Clear();
            gameState = GameState.Introduction;
            ShowInitialMessage();
            DisplayGameOutput();
        }

        private void btnSubmit_Click(object sender, EventArgs e)
        {
            string command = txtCommand.Text.Trim();
            txtCommand.Clear();
            AppendResponse($"You typed: {command}");
            ProcessCommand(command);
        }
    }
}
Form1.Designer
namespace TextAdventureGame
{
    partial class Form1
    {
        private System.ComponentModel.IContainer components = null;
        private System.Windows.Forms.Label lblNarration;
        private System.Windows.Forms.Label lblHealth;
        private System.Windows.Forms.Label lblLocation;
        private System.Windows.Forms.Label lblDescription;
        private System.Windows.Forms.ListBox lstInventory;
        private System.Windows.Forms.TextBox txtCommand;
        private System.Windows.Forms.Button btnSubmit;
        private System.Windows.Forms.TextBox txtOutput;

        private void InitializeComponent()
        {
            // ...

            // Initialize lblNarration
            this.lblNarration = new System.Windows.Forms.Label();
            this.lblNarration.AutoSize = true;
            this.lblNarration.Location = new System.Drawing.Point(12, 15);
            this.lblNarration.Name = "lblNarration";
            this.lblNarration.Size = new System.Drawing.Size(35, 13);
            this.lblNarration.TabIndex = 0;
            this.lblNarration.Text = "Narration: ";

            // Initialize lblHealth
            this.lblHealth = new System.Windows.Forms.Label();
            this.lblHealth.AutoSize = true;
            this.lblHealth.Location = new System.Drawing.Point(12, 40);
            this.lblHealth.Name = "lblHealth";
            this.lblHealth.Size = new System.Drawing.Size(45, 13);
            this.lblHealth.TabIndex = 1;
            this.lblHealth.Text = "Health: ";

            // Initialize lblLocation
            this.lblLocation = new System.Windows.Forms.Label();
            this.lblLocation.AutoSize = true;
            this.lblLocation.Location = new System.Drawing.Point(12, 65);
            this.lblLocation.Name = "lblLocation";
            this.lblLocation.Size = new System.Drawing.Size(52, 13);
            this.lblLocation.TabIndex = 2;
            this.lblLocation.Text = "Location: ";

            // Initialize lblDescription
            this.lblDescription = new System.Windows.Forms.Label();
            this.lblDescription.AutoSize = true;
            this.lblDescription.Location = new System.Drawing.Point(12, 90);
            this.lblDescription.Name = "lblDescription";
            this.lblDescription.Size = new System.Drawing.Size(66, 13);
            this.lblDescription.TabIndex = 3;
            this.lblDescription.Text = "Description: ";

            // Initialize lstInventory
            this.lstInventory = new System.Windows.Forms.ListBox();
            this.lstInventory.FormattingEnabled = true;
            this.lstInventory.Location = new System.Drawing.Point(12, 115);
            this.lstInventory.Name = "lstInventory";
            this.lstInventory.Size = new System.Drawing.Size(150, 95);
            this.lstInventory.TabIndex = 4;

            // Initialize txtCommand
            this.txtCommand = new System.Windows.Forms.TextBox();
            this.txtCommand.Location = new System.Drawing.Point(12, 220);
            this.txtCommand.Name = "txtCommand";
            this.txtCommand.Size = new System.Drawing.Size(150, 20);
            this.txtCommand.TabIndex = 5;

            // Initialize btnSubmit
            this.btnSubmit = new System.Windows.Forms.Button();
            this.btnSubmit.Location = new System.Drawing.Point(168, 218);
            this.btnSubmit.Name = "btnSubmit";
            this.btnSubmit.Size = new System.Drawing.Size(75, 23);
            this.btnSubmit.TabIndex = 6;
            this.btnSubmit.Text = "Submit";
            this.btnSubmit.UseVisualStyleBackColor = true;
            this.btnSubmit.Click += new System.EventHandler(this.btnSubmit_Click);

            // Initialize txtOutput
            this.txtOutput = new System.Windows.Forms.TextBox();
            this.txtOutput.Location = new System.Drawing.Point(249, 12);
            this.txtOutput.Multiline = true;
            this.txtOutput.Name = "txtOutput";
            this.txtOutput.ReadOnly = true;
            this.txtOutput.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
            this.txtOutput.Size = new System.Drawing.Size(300, 226);
            this.txtOutput.TabIndex = 7;

            // Add controls to the form
            this.Controls.Add(this.lblNarration);
            this.Controls.Add(this.lblHealth);
            this.Controls.Add(this.lblLocation);
            this.Controls.Add(this.lblDescription);
            this.Controls.Add(this.lstInventory);
            this.Controls.Add(this.txtCommand);
            this.Controls.Add(this.btnSubmit);
            this.Controls.Add(this.txtOutput);

            // ...
        }
    }
}
Program
using System;
using System.Windows.Forms;

namespace TextAdventureGame
{
    static class Program
    {
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new Form1());
        }
    }